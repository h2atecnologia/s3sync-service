name: Build

env:
  GO_VERSION: 1.15
  ATTACHMENTS: ""

on:
  push:
    release:
      types:
        - created
    branches:
      - master
      - devel
    pull_request:
      branches:
        - master
        - devel

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Chechout
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install dependencies
        run: |
          cd src
          go mod vendor
      - name: Run tests
        RELEASE_VERSION: ${{ env.GITHUB_REF_SLUG }}
        run: |
          if [ "${RELEASE_VERSION}" = "master" ]; then
            RELEASE_VERSION="latest"
          fi
          make test
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Chechout
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install dependencies
        run: |
          cd src
          go mod vendor
      - name: Build
        run: make build-all
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: ${{ github.event_name == 'release' }}
        with:
          name: s3sync-service-${{ env.GITHUB_REF_SLUG }}
          path: s3sync-service-*
  docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Chechout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Docker buildx
        env:
          RELEASE_VERSION: ${{ env.GITHUB_REF_SLUG }}
        run: |
          if [ "${RELEASE_VERSION}" = "master" ]; then
            RELEASE_VERSION="latest"
          fi
          make docker-multi-arch
  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' }}
    needs: [build, docker]
    steps:
      - name: Chechout
        uses: actions/checkout@v2
      - name: Set up Hub
        uses: geertvdc/setup-hub@master
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: s3sync-service-${{ env.GITHUB_REF_SLUG }}
          path: artifacts/
      - name: Upload assets
        run: |
          for artifact in $(ls artifacts/*); do ATTACHMENTS="${ATTACHMENTS} -a ${artifact}"; done;
          hub release edit -d -m "" ${{ env.GITHUB_REF_SLUG }} ${ATTACHMENTS}
